import type { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import { signIn, signOut, useSession } from 'next-auth/react';

import { api } from '~/utils/api';
import { getServerAuthSession } from '~/server/auth';
import Layout from '~/components/Layout';

export const getServerSideProps: GetServerSideProps = async (ctx) => {
    const session = await getServerAuthSession(ctx);

    if (!session) {
        return {
            redirect: {
                destination: '/login',
                permanent: false,
            },
        };
    }

    return { props: { session } };
};

const HomePage: NextPage = () => {
    const hello = api.example.hello.useQuery({ text: 'from tRPC' });

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name='description' content='Generated by create-t3-app' />
                <link rel='icon' href='/favicon.ico' />
            </Head>
            <Layout>
                {hello.data?.greeting}
                <AuthShowcase />
            </Layout>
        </>
    );
};

export default HomePage;

const AuthShowcase: React.FC = () => {
    const { data: sessionData } = useSession();

    const { data: secretMessage } = api.example.getSecretMessage.useQuery(
        undefined, // no input
        { enabled: sessionData?.user !== undefined }
    );

    return (
        <div className='flex flex-col items-center justify-center gap-4'>
            <p className='text-center text-2xl text-white'>
                {sessionData && (
                    <span>Logged in as {sessionData.user?.name}</span>
                )}
                {secretMessage && <span> - {secretMessage}</span>}
            </p>
            <button
                className='rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20'
                onClick={
                    sessionData
                        ? () => void signOut()
                        : () => void signIn('google')
                }
            >
                {sessionData ? 'Sign out' : 'Sign in'}
            </button>
        </div>
    );
};
